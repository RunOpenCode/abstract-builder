<?php

namespace RunOpenCode\AbstractBuilder\Generator;

use PhpParser\BuilderFactory;
use PhpParser\Parser;
use PhpParser\ParserFactory;
use PhpParser\PrettyPrinter\Standard;
use RunOpenCode\AbstractBuilder\Ast\Metadata\ClassMetadata;
use RunOpenCode\AbstractBuilder\Ast\Metadata\FileMetadata;
use RunOpenCode\AbstractBuilder\Ast\Metadata\MethodMetadata;
use RunOpenCode\AbstractBuilder\Ast\MetadataLoader;
use RunOpenCode\AbstractBuilder\Command\Question\ClassChoice;
use RunOpenCode\AbstractBuilder\ReflectiveAbstractBuilder;
use RunOpenCode\AbstractBuilder\Utils\ClassUtils;
use PHPParser\Node;

class BuilderGenerator
{
    /**
     * @var BuilderFactory
     */
    private $factory;

    /**
     * @var Parser
     */
    private $parser;

    /**
     * @var MetadataLoader
     */
    private $loader;

    /**
     * @var Standard
     */
    private $printer;

    public function __construct()
    {
        $this->factory = new BuilderFactory();
        $this->parser = (new ParserFactory())->create(ParserFactory::ONLY_PHP7);
        $this->loader = new MetadataLoader();
        $this->printer = new Standard();
    }

    public function create(ClassChoice $buildingClassChoice, $builderFilename, $builderClassName)
    {

        $namespace = $this->factory->namespace($ns = ClassUtils::getNamespace($builderClassName));

        $namespace->addStmt($this->factory->use(ReflectiveAbstractBuilder::class));

        $builderClass = $this->factory->class($builderClassName)
            ->extend('ReflectiveAbstractBuilder')
            ->setDocComment(sprintf(
                '
/**
 * Class %s
 *
 * This class is implementation of builder pattern 
 * for class %s. 
 *  
 * This class is autogenerated by runopencode/abstract-builder library.
 *
 * @package %s
 *
 * @see %s
 * @see https://en.wikipedia.org/wiki/Builder_pattern
 */', $builderClassName, $buildingClassChoice->getClass()->getName(), $ns, ReflectiveAbstractBuilder::class));

        if ($buildingClassChoice->getClass()->isFinal()) {
            $builderClass->makeFinal();
        }

        if ($buildingClassChoice->getClass()->isAbstract()) {
            $builderClass->makeAbstract();
        }

        if (!$buildingClassChoice->getClass()->isAbstract()) {

            $buildMethod = $this->factory->method('build')
                ->makePublic()
                ->addStmts($this->parser->parse(
                    <<<'CODE'
<?php return parent::build();
CODE

                ))
                ->setDocComment(sprintf(
                    '
/**
 * Builds new instance of %s from provided arguments. 
 *
 * @return %s
 */', $buildingClassChoice->getClass()->getName(), $buildingClassChoice->getClass()->getName()
                ));

            $builderClass->addStmt($buildMethod->getNode());
        }

        $getObjectFqcnMethod = $this->factory->method('getObjectFqcn')
            ->makeProtected()
            ->addStmt(new Node\Stmt\Return_(new Node\Scalar\String_($builderClassName)))
            ->setDocComment(
                '
/**
 * {@inheritdoc}
 */'
            );

        $builderClass->addStmt($getObjectFqcnMethod->getNode());

        $configureParametersMethod = $this->factory->method('configureParameters')
            ->makeProtected()
            ->addStmts($this->parser->parse(
                <<<'CODE'
<?php $defaults = parent::configureParameters();
// Modify default values here
return $defaults;
CODE

            ))
            ->setDocComment(
                '
/**
 * You can override default building parameter values here 
 *
 * {@inheritdoc}
 */'
            );

        $builderClass->addStmt($configureParametersMethod->getNode());

        $namespace->addStmt($builderClass->getNode());

        $classMetadata = new ClassMetadata(
            $builderClassName,
            $this->loader->load(ReflectiveAbstractBuilder::class)->getClass(ReflectiveAbstractBuilder::class),
            [],
            $buildingClassChoice->getClass()->isFinal(),
            $buildingClassChoice->getClass()->isAbstract(),
            [
                MethodMetadata::fromClassMethod($configureParametersMethod->getNode()),
                MethodMetadata::fromClassMethod($getObjectFqcnMethod->getNode())
            ],
            $builderClass->getNode()
        );

        $fileMetadata = new FileMetadata($builderFilename, [], [$classMetadata], [], [$namespace->getNode()]);

        return $fileMetadata;
    }

    public function write(FileMetadata $file)
    {
        return $this->printer->prettyPrint($file->getAst());
    }
}
