<?php

namespace RunOpenCode\AbstractBuilder\Generator;

use RunOpenCode\AbstractBuilder\Ast\BuilderFactory;
use RunOpenCode\AbstractBuilder\Ast\Metadata\ClassMetadata;
use RunOpenCode\AbstractBuilder\Ast\Metadata\FileMetadata;
use RunOpenCode\AbstractBuilder\Ast\MetadataLoader;
use RunOpenCode\AbstractBuilder\Ast\Printer;
use RunOpenCode\AbstractBuilder\ReflectiveAbstractBuilder;
use RunOpenCode\AbstractBuilder\Utils\ClassUtils;

class BuilderGenerator
{
    /**
     * @var BuilderGenerator
     */
    private static $instance;

    /**
     * @var BuilderFactory
     */
    private $factory;

    /**
     * @var Printer
     */
    private $printer;

    private function __construct()
    {
        $this->factory = BuilderFactory::getInstance();
        $this->printer = Printer::getInstance();
    }

    public function initializeBuilder(ClassMetadata $subject, $filename, $class, $withReturnTypeDeclaration = false)
    {
        $namespace = $this->factory->namespace($ns = ClassUtils::getNamespace($class));

        $namespace->addStmt($this->factory->use(ReflectiveAbstractBuilder::class));

        $builder = $this->factory->class(ClassUtils::getShortName($class))
            ->extend('ReflectiveAbstractBuilder')
            ->setDocComment(sprintf(
                '
/**
 * Class %s
 *
 * This class is implementation of builder pattern 
 * for class %s. 
 *  
 * This class is autogenerated by runopencode/abstract-builder library.
 *
 * @package %s
 *
 * @see %s
 * @see https://en.wikipedia.org/wiki/Builder_pattern
 */', $class, $subject->getName(), $ns, ReflectiveAbstractBuilder::class));


        if ($subject->isFinal()) {
            $builder->makeFinal();
        }

        if ($subject->isAbstract()) {
            $builder->makeAbstract();
        }

        $builder = new ClassMetadata(
            $class,
            MetadataLoader::create()->load(ReflectiveAbstractBuilder::class)->getClass(ReflectiveAbstractBuilder::class),
            [],
            $subject->isFinal(),
            $subject->isAbstract(),
            [],
            $builder->getNode()
        );

        $namespace->addStmt($builder->getAst());

        $classFactory = new BuilderClassFactory($builder, $subject, $withReturnTypeDeclaration);

        $classFactory
            ->addBuildMethod()
            ->addGetObjectFqcnMethod()
            ->addConfigureParametersMethod();

        if (!$builder->isAbstract()) {
            $classFactory->addCreateBuilderMethod();
        }

        return new FileMetadata($filename, [], [$builder], [], [$namespace->getNode()]);
    }

    public function write(FileMetadata $file)
    {
        return $this->printer->prettyPrintFile($file->getAst());
    }

    public static function getInstance()
    {
        if (null === self::$instance) {
            self::$instance = new static();
        }

        return self::$instance;
    }
}
